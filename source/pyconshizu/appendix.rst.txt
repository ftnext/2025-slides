Appendix
======================================================================

お前、誰よ（詳細版）
======================================================================

* :fab:`twitter` `@ftnext <https://twitter.com/ftnext>`__ ／ 登壇 `2025 <https://github.com/ftnext/2025-slides>`__ `2024 <https://github.com/ftnext/2024-slides>`__
* PyCon JP 2021 座長
* 毎月の `みんなのPython勉強会 <https://startpython.connpass.com/>`__ スタッフ
* `Uberi/speech_recognition <https://github.com/Uberi/speech_recognition>`__ 8.4k⭐️ メンテナ

スライドの秘密 〜お前、誰よ 補足〜
--------------------------------------------------

attakeiさんの `sphinx-revealjs <https://pypi.org/project/sphinx-revealjs/>`__ に以下の **自作拡張** を組み合わせて実現

* 私の代表作： `sphinx-new-tab-link <https://pypi.org/project/sphinx-new-tab-link/>`__
* `sphinx-revealjs-copycode <https://pypi.org/project/sphinx-revealjs-copycode/>`__
* `sphinx-revealjs-ext-codeblock <https://pypi.org/project/sphinx-revealjs-ext-codeblock/>`__

ハンドラのロギングレベル
======================================================================

* 結論のコード、``NullHandler`` のレベルは NOTSET

    ハンドラが生成された際、レベルは NOTSET (すべてのメッセージが処理される) に設定されます。

`Handler.setLevel <https://docs.python.org/ja/3/library/logging.html#logging.Handler.setLevel>`__ 📄

フィルタ
======================================================================

* ロガーやハンドラに取り付けられる

https://docs.python.org/ja/3/library/logging.html#filter

フィルタは何をするのか
--------------------------------------------------

    (略) name はロガーの名前を表します。指定されたロガーとその子ロガーのイベントがフィルタを通過できるようになります。(`logging.Filter() <https://docs.python.org/ja/3/library/logging.html#logging.Filter>`__ 📄)

ロガーの階層構造が関係

例： ``logging.Filter("A.B")``
--------------------------------------------------

    例えば、'A.B' で初期化されたフィルタは、ロガー 'A.B', 'A.B.C', 'A.B.C.D', 'A.B.D' 等によって記録されたイベントは許可しますが、'A.BB', 'B.A.B' などは許可しません。

`フィルタオブジェクト <https://docs.python.org/ja/3/library/logging.html#filter>`__ 📄

環境設定（このトークではスコープアウト）
======================================================================

* `logging.config <https://docs.python.org/ja/3/library/logging.config.html>`__ 📄
* ``dictConfig`` や ``fileConfig``
* 最初に読むなら『`Python実践レシピ <https://gihyo.jp/book/2022/978-4-297-12576-9>`__』17.4

ライブラリのロガーを触ってログ出力をカスタマイズ
--------------------------------------------------

* 本編で飛ばした🏃‍♂️ 拙ブログ `Pythonのライブラリに用意されたロガーを設定してログを出力する（httpxを例に） <https://nikkie-ftnext.hatenablog.com/entry/configure-python-librarys-logger>`__
* logging.config版 `Pythonのライブラリに用意されたロガーをlogging.configで設定する（httpxを例に、辞書やYAMLで設定） <https://nikkie-ftnext.hatenablog.com/entry/configure-python-librarys-logger-logging-config-dict-or-yaml>`__

標準ライブラリ logging 以外の選択肢
======================================================================

* `vinta/awesome-pythonのLogging <https://github.com/vinta/awesome-python?tab=readme-ov-file#logging>`__
* 標準ライブラリ logging
* loguru
* logbook

loguru
--------------------------------------------------

* https://github.com/Delgan/loguru
* 「*Python logging made (stupidly) simple*」と謳う
* IMO：simpleというより **easy** 。未検証だがアプリケーション向けのような

これまでのlogging関連アウトプット
======================================================================

2023年3月みんなのPython勉強会（資料公開のみ）
--------------------------------------------------

.. raw:: html

    <iframe width="800" height="480" src="https://ftnext.github.io/2023-slides/stapy-march/logging-introduction.html"
        title="Pythonのlogging入門"></iframe>

拙ブログより、logging関連エントリ 1/4
--------------------------------------------------

* `Pythonのloggingを よ う や く 完全に理解しました 〜revChatGPTでdebugレベルログを出そうとした試行錯誤を題材に〜 <https://nikkie-ftnext.hatenablog.com/entry/python-logging-root-logger-and-chain-propagation>`__
* `Pythonのloggingモジュールのドキュメントの「もっとも単純な例」を説明する 〜logging.warningの裏側で起こっていること〜 <https://nikkie-ftnext.hatenablog.com/entry/python-logging-the-simplest-example-under-the-hood>`__

拙ブログより、logging関連エントリ 2/4
--------------------------------------------------

* `Pythonのloggingモジュールで、ロガーのフィルタと、ロガーのハンドラのフィルタとで、伝播されたログに対する挙動が違うことにハマりました <https://nikkie-ftnext.hatenablog.com/entry/python-logging-filter-with-propagation-too-difficult>`__
* `Pythonのloggingモジュールのチュートリアルの中のフローチャートを、理解を深めるために写経する <https://nikkie-ftnext.hatenablog.com/entry/python-logging-handwriting-logging-flow>`__

拙ブログより、logging関連エントリ 3/4
--------------------------------------------------

* `Pythonで標準ライブラリloggingを使って自作ライブラリの中でロギングしたい未来の私へ <https://nikkie-ftnext.hatenablog.com/entry/python-logging-developing-library-take-advantage-nullhandler-and-propagate>`__
* `Pythonのloggingモジュールのドキュメント、実は小さく改善しています！👏 ようこそgetLogger() <https://nikkie-ftnext.hatenablog.com/entry/python-logging-docs-improvement-bye-logging-functions-welcome-getlogger>`__

拙ブログより、logging関連エントリ 4/4
--------------------------------------------------

* `Pythonでライブラリのロガーを使ったロギングをLogging Flowに沿って、かつフィルタやハンドラの設定にも注意を払って説明する <https://nikkie-ftnext.hatenablog.com/entry/python-logging-flow-detailed-logger-level-filter-handler>`__

2024年8月バージョン
--------------------------------------------------

.. raw:: html

    <iframe width="800" height="480" src="https://ftnext.github.io/2024-slides/pyconshizu/logging-with-nullhandler.html#/2"
        title="ライブラリ開発者に贈る「ロギングで NullHandler 以外はいけません」（2024/08）"></iframe>

2024年8月時点での発表
--------------------------------------------------

.. raw:: html

    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/UZWE7OjIWII?si=0Xv1N2yRpXlNUGar" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
