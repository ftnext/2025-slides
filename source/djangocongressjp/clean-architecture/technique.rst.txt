知識をレイヤに閉じ込めるために
======================================================================

工夫2つを共有（議論の種として）

1️⃣FastAPIのDepends
======================================================================

rest層でこれがやりたかった（再掲）
--------------------------------------------------

.. code-block:: python
    :caption: path operation関数に ``use_case`` を注入

    def inject_list_books_use_case(
        session: Annotated[type[SQLModelAsyncSession], Depends(get_session)],
    ) -> ListBooksUseCase:
        return ListBooksUseCase(FetchBooksFromDatabase(PostgresqlDatabaseDriver(session)))

    @app.get("/books", response_model=list[BookReadModel])
    async def get_books(
        use_case: Annotated[ListBooksUseCase, Depends(inject_list_books_use_case)],
    ):
        books = await use_case.execute()
        return [BookReadModel.from_book(book) for book in books]

FastAPIの ``Depends`` 🌟
--------------------------------------------------

https://fastapi.tiangolo.com/tutorial/dependencies/

.. code-block:: python

    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
        return {"q": q, "skip": skip, "limit": limit}

    @app.get("/items/")
    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
        return commons

``Annotated[..., Depends(...)]``
--------------------------------------------------

* ``typing.Annotated[<type>, <metadata>]`` メタデータを付与
* メタデータの ``Depends(関数)`` は、 **関数を実行して返り値を型ヒントしてる変数に代入**
* IMO：動きが `pytestのフィクスチャ <https://nikkie-ftnext.hatenablog.com/entry/sphinx-extension-e2e-app-status-warning-are-pytest-fixtures#pytest%E3%81%AE%E3%83%95%E3%82%A3%E3%82%AF%E3%82%B9%E3%83%81%E3%83%A3%E3%81%AF%E5%BC%95%E6%95%B0%E3%81%AB%E3%81%82%E3%82%8B%E5%88%A5%E3%81%AE%E3%83%95%E3%82%A3%E3%82%AF%E3%82%B9%E3%83%81%E3%83%A3%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%82%8B>`__ っぽい

Dependsは **連鎖** する⛓️
--------------------------------------------------

https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/

.. code-block:: python

    def query_extractor(q: str | None = None):
        # 省略

    def query_or_cookie_extractor(
        q: Annotated[str, Depends(query_extractor)],
        last_query: Annotated[str | None, Cookie()] = None,
    ):
        # 省略

    @app.get("/items/")
    async def read_query(
        query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],
    ):
        # 省略

``Depends`` の連鎖を使ってDBセッションを注入
--------------------------------------------------

.. code-block:: python
    :caption: rest層

    def inject_list_books_use_case(
        session: Annotated[type[SQLModelAsyncSession], Depends(get_session)],
    ) -> ListBooksUseCase:

.. code-block:: python
    :caption: driver層

    async def get_session():
        yield AsyncSession  # モジュールスコープでasync_sessionmakerしている

.. _rhoboro/async-fastapi-sqlalchemy: https://github.com/rhoboro/async-fastapi-sqlalchemy

出典は `rhoboro/async-fastapi-sqlalchemy`_
------------------------------------------------------------

* Sub-dependenciesに加えて `Classes as Dependencies <https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies/>`__

.. code-block:: python
    :caption: `views.py <https://github.com/rhoboro/async-fastapi-sqlalchemy/blob/12683934b451c76af5eea7ee5bf4e6c8342ca165/app/api/notes/views.py#L27-L31>`__ 抜粋

    @router.get("")
    async def read_all(
        use_case: ReadAllNote = Depends(ReadAllNote),
    ) -> ReadAllNoteResponse:

.. revealjs-break::
    :notitle:

.. code-block:: python
    :caption: `use_cases.py <https://github.com/rhoboro/async-fastapi-sqlalchemy/blob/12683934b451c76af5eea7ee5bf4e6c8342ca165/app/api/notes/use_cases.py#L22-L24>`__ 抜粋

    class ReadAllNote:
        def __init__(self, session: AsyncSession) -> None:
            self.async_session = session

.. code-block:: python
    :caption: `db.py <https://github.com/rhoboro/async-fastapi-sqlalchemy/blob/12683934b451c76af5eea7ee5bf4e6c8342ca165/app/db.py#L24-L31>`__ 抜粋

    async def get_session() -> AsyncIterator[async_sessionmaker]:
        ...

    AsyncSession = Annotated[async_sessionmaker, Depends(get_session)]

FastAPIの ``Depends`` は積極的に活用できない
--------------------------------------------------

* **レイヤ分け** を優先すると、 ``Depends`` は domain や usecase には型ヒントできない（FastAPIはrest層の技術詳細）
* FastAPIは ``Depends`` を使い倒した方が開発者は楽ができそう（差し替え可能より優先する判断もあり得る）

2️⃣拡張関数を志向する
======================================================================

拡張関数（例：Kotlin）
--------------------------------------------------

* 継承しなくてもクラスにメソッドを追加できる
* https://kotlinlang.org/docs/extensions.html

拡張する例
--------------------------------------------------

.. code-block:: kotlin
    :caption: ``MutableList<Int>`` に ``swap`` メソッドを追加

    fun MutableList<Int>.swap(index1: Int, index2: Int) {
        val tmp = this[index1] // 'this' corresponds to the list
        this[index1] = this[index2]
        this[index2] = tmp
    }

``MutableList`` はcollectionの1つ

レイヤ分けにおける拡張関数の出番
------------------------------------------------

* gateway層：ドメインの型と、外界の型（言語プリミティブな型）の **変換**
* ドメインは、DBのレコードの型（同心円の外側）を知り得ない

gatewayでドメインを拡張する案
------------------------------------------------

.. code-block:: python

    def books_from_records(book_records: list[BookRecord]) -> Books:
        return Books(...)
    
    Books.from_ = staticmethod(books_from_records)  # type: ignore[attr-defined]

gatewayにおけるBooksドメインに ``from_()`` メソッドを実行時に生やした

Python版 *拡張関数*
------------------------------------------------

* レイヤ間の関心の分離は達成！
* **実質はメタプログラミング** 。型チェックで怒られ、コードジャンプに影響

他の方法は今は浮かんでいません...
