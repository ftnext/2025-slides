The Clean Architecture
======================================================================

* Robert C. Martin (Uncle Bob) によるブログ
* https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
* 氏による書籍『Clean Architecture』と区別してます

ブログ中のイラスト
--------------------------------------------------

TODO

同心円の図は **一例** を示したにすぎない

次第に近づいていくもの（t-wadaさん）
--------------------------------------------------

https://x.com/t_wada/status/1882578423094419522

レイヤ分け
======================================================================

domain / usecase / gateway(port) / driver / rest

The Clean Architectureの黄金律
--------------------------------------------------

* 自分より **内側にあるものだけ** に依存する

  * usecaseはdomainを知っている（依存する）

domain
--------------------------------------------------

.. TODO コード入れていこう（見出しも上位に上げられそう）

* 同心円の一番内側
* システムがなくても存在するビジネスロジック（例：銀行）

usecase
--------------------------------------------------

* 同心円の内側から2番目
* システムにするために必要なロジック
* メモリ上で完璧に構築（IOなどないのでアプリケーションではない）

port
--------------------------------------------------

* インターフェース
* usecaseはportを知っている

    * 使い方を知っている
    * 中身（どんな実装をされているか）は知らない

.. 依存性の逆転（DIP）
    「作ると使うを分ける」から至る

gateway
--------------------------------------------------

* portを実装する
* 外界（プログラミング言語プリミティブな型で表現）から、ドメインの型に変換する
* システムレベルで見ると、usecaseには（portを実装した）gatewayを渡す

さらにgatewayでもインターフェースを定義する
--------------------------------------------------

* driverが実装するインターフェース
* ORM（SQLModel）もgatewayに置いた（インターフェースの型に必要）

driver
--------------------------------------------------

* 一番外側
* 外界に接する：HTTPリクエスト、DB
* ``int`` や ``str`` など、プログラミング言語プリミティブな型（ドメインの型ではない）

rest
--------------------------------------------------

* これもまた外界：Web APIにして外界に接する
* FastAPIのフレームワークの機能を活用
* 実装では、Web APIとして動かすための依存を渡した
