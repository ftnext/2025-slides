The Clean Architecture
======================================================================

* Robert C. Martin (Uncle Bob) によるブログ
* https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
* 氏による書籍『`Clean Architecture <https://asciidwango.jp/post/176293765750/clean-architecture>`__』と区別してます

XXXアーキテクチャに共通するもの
--------------------------------------------------

* Hexagonal (=Ports and Adapters) / Onion / e.t.c.
* **レイヤ分け** による **関心の分離**

「共通するもの」の概要（schematic）
--------------------------------------------------

.. image:: ../_static/djangocongressjp/uncle-bob-CleanArchitecture.jpg
    :scale: 80%

注：この4層を導入すれば、クリーンアーキテクチャ **ではありません**

The Dependency Rule
--------------------------------------------------

    source code dependencies can only point inwards.

各レイヤは、自分より **内側のレイヤだけに依存** する

なぜ提唱されたのか（私の理解）
--------------------------------------------------

* 例えば、DjangoのModel-View-Template
* アプリケーションの中心にあるのは、フレームワーク（Django・FastAPI）や具体のDBになってませんか？
* ユーザ価値を提供する **ビジネスルール** をアプリケーションの中心に置きたい！

The Clean Architecture は
--------------------------------------------------

* **中心にはビジネスルール**
* フレームワークやデータベースから **独立** （差し替え可能）
* 詳細の決定を遅らせる

.. 次第に近づいていくもの（t-wadaさん）
    https://x.com/t_wada/status/1882578423094419522

Clean Architectureを学んできた道🏃‍♂️
--------------------------------------------------

* `Software Design 2023年6月号 <https://gihyo.jp/magazine/SD/archive/2023/202306>`__ 第1特集
* 『`ちょうぜつソフトウェア設計入門 <https://gihyo.jp/book/2022/978-4-297-13234-7>`__』

レイヤ分け
======================================================================

.. code-block:: txt

    src/api
    ├── domain/
    ├── driver/
    ├── gateway/
    ├── port/
    ├── rest/
    └── use_case/

このレイヤ分けで実現したいこと
--------------------------------------------------

.. code-block:: python
    :caption: FastAPIのpath operation関数に ``use_case`` を注入
    :emphasize-lines: 3,5

    @app.get("/books", response_model=list[BookReadModel])
    async def get_books(
        use_case: Annotated[ListBooksUseCase, Depends(inject_list_books_use_case)],
    ):
        books = await use_case.execute()
        return [BookReadModel.from_book(book) for book in books]

同心円の内側 -> 外側の向きに見ていきます
--------------------------------------------------

.. image:: ../_static/djangocongressjp/uncle-bob-CleanArchitecture.jpg

domain
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/domain.drawio.png

domain
--------------------------------------------------

* 同心円の一番内側（図ではEntities）
* **システムがなくても存在** するビジネスルール（例：銀行）
* 事業領域をコードで表現する（*ドメインモデリング* 。ここに時間を使えています）

ドメインモデリング 参考資料🏃‍♂️
--------------------------------------------------

* `クソコード動画「Userクラス」で考える技術的負債解消の観点 <https://speakerdeck.com/minodriven/kusokododong-hua-userkurasu-dekao-eruji-shu-de-fu-zhai-jie-xiao-falseguan-dian>`__
* `概念投影によるオブジェクト指向設計の考え方とその方法 <https://www.youtube.com/live/2mfj_yjalqk?si=VGeuDgSataYyfjaA>`__
* `ソフトウェアの実装と事業戦略を結びつける <https://speakerdeck.com/masuda220/aligning-software-architecture-and-business-strategy-2024-8-forkwill>`__

Pydanticの ``BaseModel`` を使って実装
--------------------------------------------------

* ``frozen=True`` 変更できなくする

.. code-block:: python

    class Book(BaseModel, frozen=True):
        id: str
        isbn: ISBN
        title: str
        page: int

.. revealjs-break::

* 同値性 （``__eq__()``）
* **特殊メソッドを追加** （コレクションの例： ``__iter__()`` でイテラブルに）

.. code-block:: python

    class Books(BaseModel, frozen=True):
        values: list[Book]

        def __iter__(self) -> Generator[Book, None, None]:  # type: ignore[override]
            yield from self.values

usecase
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/use-case.drawio.png

usecase
--------------------------------------------------

* 同心円の内側から2番目
* システムで **事業領域の課題を解決するロジック** （＝アプリケーション）
* メモリ上では完璧に構築（IOなどはないので使えない）

usecaseが知っているもの（内側のみ）
--------------------------------------------------

* usecaseは内側のdomainを知っている
* usecaseは *port* も知っている（メソッドは呼び出せる）

.. code-block:: python

    await self.fetch_books_port.fetch()

port
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/port.drawio.png

port
--------------------------------------------------

* **インターフェース**

.. code-block:: python

    class FetchBooksPort(ABC):
        @abstractmethod
        async def fetch(self) -> Books:
            raise NotImplementedError

usecaseは
--------------------------------------------------

* portの **使い方を知っている** （例：``fetch()`` メソッドはある！）
* 中身がどんな実装をされているか（例：データ取得がファイルからかデータベースからか）は知らない

usecaseにportが渡る
--------------------------------------------------

.. code-block:: python

    class ListBooksUseCase:
        def __init__(self, fetch_books_port: FetchBooksPort) -> None:
            self.fetch_books_port = fetch_books_port

* 作ると使うを一緒にせずに **分ける**
* usecaseは **使うだけ** （*依存性の逆転*）

gateway
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/gateway.drawio.png

gateway
--------------------------------------------------

* portを実装する
* usecaseには（portを実装した）gatewayを渡す

.. code-block:: python
    :caption: 「データベース」と技術詳細が顔を出す

    class FetchBooksFromDatabase(FetchBooksPort):

usecaseはgatewayに依存する
--------------------------------------------------

.. code-block:: python
    :caption: 作って使えたらな...

    class ListBooksUseCase:
        def execute(self) -> Books:
            fetch_books = FetchBooksFromDatabase()
            return await fetch_books.fetch()

作ると使うを分ける
--------------------------------------------------

.. code-block:: python
    :caption: 外からgatewayが渡ってくる。 **使うだけ**

    class ListBooksUseCase:
        def __init__(self, fetch_books: FetchBooksFromDatabase) -> None:
            self.fetch_books = fetch_books

        def execute(self) -> Books:
            return await self.fetch_books.fetch()

依存性の逆転（DIP）
--------------------------------------------------

* 具体のgatewayではなく、port＝インターフェース（**使い方**） **に依存** する
* usecaseは詳細は知らなくても使える

.. code-block:: python

    class ListBooksUseCase:
        def __init__(self, fetch_books_port: FetchBooksPort) -> None:
            self.fetch_books_port = fetch_books_port

        async def execute(self) -> Books:
            return await self.fetch_books_port.fetch()

gatewayでデータを **変換**
======================================================================

* ORM（SQLModel）をgatewayに置く
* 外界（プログラミング言語プリミティブな型で表現）から、ドメインの型に変換する

.. code-block:: python
    :caption: 外界（データベース）

    class BookRecord(SQLModel, table=True):

.. code-block:: python
    :caption: ドメイン

    class Book(BaseModel, frozen=True):

さらにgatewayでもインターフェースを定義する
======================================================================

* gateway自身はこのインターフェースを知っている
* driverが実装する（再び登場、 **依存性の逆転**）

.. code-block:: python

    class DatabaseDriver(ABC):
        @abstractmethod
        async def select_books(self) -> list[BookRecord]:
            raise NotImplementedError

driver
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/driver.drawio.png

driver
--------------------------------------------------

* 一番外側
* 外界に接する：HTTPリクエスト、DB
* ``int``, ``str``, ``list``, ``dict`` など、プログラミング言語プリミティブな型で扱う（ドメインの型ではない）

gatewayのインターフェースを実装
--------------------------------------------------

.. code-block:: python
    :caption: 具体的な技術詳細が登場（PostgreSQL）

    class PostgresqlDatabaseDriver(DatabaseDriver):
        async def select_books(self) -> list[BookRecord]:
            # 初期化で渡されるセッションを使って、DBとやり取り

rest
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/rest.drawio.png

rest
--------------------------------------------------

* これもまた外界：Web APIにして外界に接する
* **FastAPIのフレームワークの機能を活用** （HTTPリクエストを処理するcontrollerも兼ねる）
* 実装では、Web APIとして動かすための依存を渡した

usecaseを組み立てる
--------------------------------------------------

.. code-block:: python

    def inject_list_books_use_case(
        session: Annotated[type[SQLModelAsyncSession], Depends(get_session)],
    ) -> ListBooksUseCase:
        return ListBooksUseCase(FetchBooksFromDatabase(PostgresqlDatabaseDriver(session)))

これをpath operation関数で実行

APIのレスポンスの型を定義
--------------------------------------------------

* **ドメインの型を直接は返さない**
* API利用者に見せるレスポンスの型を作る（たまたまドメインの型と同じ属性になることもある）

まとめ🥟 クリーンなアーキテクチャを志向したレイヤ分け
======================================================================

.. code-block:: txt

    src/api
    ├── domain/    # システムによらないビジネスルールを表現
    ├── use_case/  # domainを操作して課題解決
    ├── port/      # インターフェース。use_caseが依存し、gatewayで実装
    ├── gateway/   # portを実装。データの変換。driver向けにインターフェースを定義
    ├── driver/    # gatewayのインターフェースを実装。DBやWeb APIと接する
    └── rest/      # Webアプリ。今回はFastAPIの機能を使った

上ほど同心円の内側
