The Clean Architecture
======================================================================

* Robert C. Martin (Uncle Bob) によるブログ
* https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
* 氏による書籍『Clean Architecture』と区別してます

XXXアーキテクチャに共通するもの
--------------------------------------------------

* Hexagonal (=Ports and Adapters) / Onion
* **レイヤ分け** による **関心の分離**

「共通するもの」の概要（schematic）
--------------------------------------------------

.. image:: ../_static/djangocongressjp/uncle-bob-CleanArchitecture.jpg

注：この4層を導入すれば、クリーンアーキテクチャ **ではありません**

The Dependency Rule
--------------------------------------------------

    source code dependencies can only point inwards.

各レイヤは、自分より **内側にあるレイヤだけに依存** する

なぜ登場したのか（私の理解）
--------------------------------------------------

* 例えば、DjangoのModel-View-Template
* アプリケーションの中心にあるのは、フレームワークDjangoや具体のDBになってませんか？
* ユーザ価値を提供する **ビジネスルール** をアプリケーションの中心に置きたい！

The Clean Architecture は
--------------------------------------------------

* 中心にはビジネスルール
* フレームワークやデータベースから **独立** （差し替え可能）
* 詳細の決定を遅らせる

.. 次第に近づいていくもの（t-wadaさん）
    https://x.com/t_wada/status/1882578423094419522

レイヤ分け
======================================================================

.. code-block::

    src/api
    ├── domain/
    ├── driver/
    ├── gateway/
    ├── port/
    ├── rest/
    └── use_case/

このレイヤ分けで実現したいこと
--------------------------------------------------

.. code-block:: python
    :caption: path operation関数に ``use_case`` を注入
    :emphasize-lines: 3,5

    @app.get("/books", response_model=list[BookReadModel])
    async def get_books(
        use_case: Annotated[ListBooksUseCase, Depends(inject_list_books_use_case)],
    ):
        books = await use_case.execute()
        return [BookReadModel.from_book(book) for book in books]

同心円の内側 -> 外側の向きに見ていきます
--------------------------------------------------

.. image:: ../_static/djangocongressjp/uncle-bob-CleanArchitecture.jpg

domain
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/domain.drawio.png

domain
--------------------------------------------------

.. TODO コード入れていこう（見出しも上位に上げられそう）

* 同心円の一番内側（図ではEntities）
* システムがなくても存在するビジネスロジック（例：銀行）
* 事業領域をコードで表現する

usecase
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/domain.drawio.png

usecase
--------------------------------------------------

* 同心円の内側から2番目
* システムにするために必要なロジック
* メモリ上で完璧に構築（IOなどないのでアプリケーションではない）

usecaseが知っているもの（内側のみ）
--------------------------------------------------

* usecaseは内側のdomainを知っている
* usecaseは *port* も知っている

port
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/port.drawio.png

port
--------------------------------------------------

* **インターフェース**
* usecaseは

    * 使い方を知っている
    * 中身（どんな実装をされているか）は知らない

.. 依存性の逆転（DIP）
    「作ると使うを分ける」から至る

gateway
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/gateway.drawio.png

gateway
--------------------------------------------------

* portを実装する
* 外界（プログラミング言語プリミティブな型で表現）から、ドメインの型に変換する
* システムレベルで見ると、usecaseには（portを実装した）gatewayを渡す

さらにgatewayでもインターフェースを定義する
======================================================================

* driverが実装するインターフェース
* ORM（SQLModel）もgatewayに置いた（インターフェースの型に必要）

driver
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/driver.drawio.png

driver
--------------------------------------------------

* 一番外側
* 外界に接する：HTTPリクエスト、DB
* ``int`` や ``str`` など、プログラミング言語プリミティブな型（ドメインの型ではない）

rest
======================================================================

.. image:: ../_static/djangocongressjp/CleanArchitecture/rest.drawio.png

rest
--------------------------------------------------

* これもまた外界：Web APIにして外界に接する
* FastAPIのフレームワークの機能を活用
* 実装では、Web APIとして動かすための依存を渡した
