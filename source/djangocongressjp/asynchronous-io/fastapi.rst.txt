FastAPI
======================================================================

Starlette + Pydantic + 作者tiangolo氏の工夫

https://fastapi.tiangolo.com/features/

encode/starlette
--------------------------------------------------

.. DRFの開発元でもある

* https://github.com/encode/starlette
* lightweight ASGI framework（非同期IOサポート）
* **高いパフォーマンス** （`Web Framework Benchmarks <https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=fortune&l=zijzen-1>`__ 0.18.0時点。FastAPIにも恩恵）

.. https://github.com/encode/starlette/tree/0.18.0?tab=readme-ov-file#performance

Pydantic
--------------------------------------------------

* https://github.com/pydantic/pydantic
* 型ヒントに沿って **パース** するライブラリ（『`ロバストPython <https://www.oreilly.co.jp/books/9784814400171/>`__』）
* エディタでの補完や、実行時バリデーション

FastAPIの ``async def``
======================================================================

.. 用語 https://fastapi.tiangolo.com/tutorial/first-steps/#step-4-define-the-path-operation-function

.. code-block:: python

    @app.get("/sync")  # path operation decorator
    def path_operation_function_def():
        return {"message": "Hello World"}

    @app.get("/async")
    async def path_operation_function_async_def():
        return {"message": "どんなときにasync defにする？"}

雑な回答
--------------------------------------------------

📣「FastAPIなら ``async def`` でしょ！」

.. _Python実践入門: https://gihyo.jp/book/2020/978-4-297-11111-3

処理は2種類（『`Python実践入門`_』）
--------------------------------------------------

* IOバウンド

    * 外部との通信（APIやDB）
    * ファイルの読み書き

* CPUバウンド

    * CPUで計算

そもそも非同期IOが有効なのは
--------------------------------------------------

* **IOバウンド** な処理（CPUバウンドではない）
* CPUをIO待ちにしないで他の処理を進める

FastAPIのドキュメント曰く
--------------------------------------------------

.. https://fastapi.tiangolo.com/async/#in-a-hurry

* 非同期IOをサポートするライブラリを使うなら、パスオペレーション関数は ``async def``
* Pythonの文法として ``await`` が使えるのは ``async def`` の中だけ

.. code-block:: python

    client = AsyncOpenAI()

    @app.get("/async")
    async def use_async_support_library():
        chat_completion = await client.chat.completions.create(...)

.. https://github.com/openai/openai-python?tab=readme-ov-file#async-usage

.. revealjs-break::

* 非同期IOをサポートしないライブラリなら、パスオペレーション関数は ``def``
* ＝ブロッキングIOでは ``def``

.. code-block:: python 

    @app.get("/sync")
      def use_blocking_io_library():
        response = requests.get(...)

質問：CPUバウンドな処理は、どっち？
--------------------------------------------------

FastAPIでは ``async def`` ‼️
--------------------------------------------------

    it's better to use ``async def`` unless your path operation functions use code that performs blocking I/O.

「パスオペレーション関数がブロッキングIOするコードを使わない場合、 ``async def`` がよい」

.. TL;DRにある、非同期IOをサポートしていない（＝ブロッキングIO） -> ``def``
    「If your application (somehow) doesn't have to communicate with anything else and wait for it to respond, use async def.」

https://fastapi.tiangolo.com/async/#path-operation-functions

FastAPIでの非同期IO🥟
--------------------------------------------------

* **非同期IOをサポートしたライブラリを使って**、パスオペレーション関数を ``async def`` で書こう！
* CPUバウンドな処理もFastAPIでは ``async def`` で書くとよい
