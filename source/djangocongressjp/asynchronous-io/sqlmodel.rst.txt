SQLModel
======================================================================

SQLAlchemy + Pydantic + 作者tiangolo氏の工夫

https://sqlmodel.tiangolo.com/features/

速習SQLModel🏃‍♂️ (PyCon JP 2024)
--------------------------------------------------

.. raw:: html

    <iframe width="560" height="315" src="https://www.youtube.com/embed/x7qCG9RP7u4?si=_cwx2RHSBf0CZkxL" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

`チュートリアル <https://sqlmodel.tiangolo.com/tutorial/>`__ の内容を30分でカバーしてます

ここでもPydantic
--------------------------------------------------

* ``SQLModel`` を継承したクラスは、Pydanticの ``BaseModel`` でもあるので、 **FastAPIで使える**
* ORMを扱う際にもエディタで補完が効く

SQLAlchemy
--------------------------------------------------

* https://github.com/sqlalchemy/sqlalchemy
* 代表的なORM
* **DBの非同期IO** をサポート！（ありがとう！！）

DBの非同期IO
======================================================================

* **SQLAlchemy** にSQLModelは乗っかる（SQLAlchemyの話になります）
* PostgreSQLの例

SQLModelとして
--------------------------------------------------

.. code-block:: python

    from sqlalchemy.ext.asyncio import create_async_engine
    from sqlmodel.ext.asyncio.session import AsyncSession

    database_url = "postgresql+asyncpg://developer:mysecretpassword@127.0.0.1:5432/practice"
    engine = create_async_engine(database_url)
    async with AsyncSession(engine) as session:
        ...

IMO： ``async_sessionmaker`` といいとこ取り
--------------------------------------------------

.. code-block:: python

    from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine
    from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession

    database_url = "postgresql+asyncpg://developer:mysecretpassword@127.0.0.1:5432/practice"
    engine = create_async_engine(database_url)
    AsyncSession = async_sessionmaker(engine, class_=SQLModelAsyncSession)
    async with AsyncSession() as session:  # AsyncSession.begin() もできる
        ...

SQLModelが提供するDBセッション
--------------------------------------------------

.. code-block:: python

    from sqlmodel import Session
    from sqlmodel.ext.asyncio.session import AsyncSession

* **DBとのやり取り** はセッションを通して
* SQLAlchemyの ``Session`` や ``AsyncSession`` を継承したクラス

DBセッション比較
--------------------------------------------------

.. list-table::

    * - ライブラリ
      - ``execute()`` 
      - ``exec()``
    * - SQLAlchemy
      - **ある**
      - ない
    * - SQLModel
      - ある
      - **ある** （推奨）

SQLModelのDBセッションは **型が当たる**
--------------------------------------------------

* ``Session`` インスタンスに ``statement`` を渡して、 ``exec()`` メソッドを呼ぶ

.. code-block:: python
    :emphasize-lines: 3

    statement = select(Hero)
    async with AsyncSession(async_engine) as session:
        results = await session.exec(statement)
        for hero in results:
            print(repr(hero))

* SQLAlchemyのSessionの ``execute().scalars()`` メソッドを呼んで実現🏃‍♂️

``sessionmaker`` の提供
--------------------------------------------------

:SQLAlchemy: ある。セッションの **ファクトリ** クラスを返すため、常に ``engine`` を渡して初期化しなくてよくなる
:SQLModel: ない。`tiangolo氏 <https://github.com/fastapi/sqlmodel/issues/75#issuecomment-1311796665>`__ 「常に ``with Session(engine)`` すればよい」（IMO：せやろか？）

提案：sessionmakerでSQLModelのセッションを返させる
------------------------------------------------------------

.. code-block:: python
    :emphasize-lines: 4

    from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine
    from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession

    AsyncSession = async_sessionmaker(engine, class_=SQLModelAsyncSession)

.. https://docs.sqlalchemy.org/en/20/orm/session_basics.html#using-a-sessionmaker

* SQLModelのセッションのファクトリなので ``exec()`` が使える！
* 現状、世にはSQLAlchemyの例が多いので、DB接続部分は参考にできる

提案の参考🏃‍♂️
------------------------------------------------------------

* 大元 `Add sessionmaker #75 <https://github.com/fastapi/sqlmodel/issues/75#issuecomment-2109911909>`__
* 拙ブログ `SQLModel素振りの記：PostgreSQLに同期接続 〜selectして見えた、SQLAlchemyのsessionmakerのclass_引数によるいいとこ取り案〜 <https://nikkie-ftnext.hatenablog.com/entry/sqlmodel-postgres-sync-connection-sqlalchemy-sessionmaker-integration>`__
* 拙ブログ `SQLModelでPostgreSQLに非同期接続する実装を考える <https://nikkie-ftnext.hatenablog.com/entry/sqlmodel-postgres-async-connection-proposal-sqlalchemy-sessionmaker-integration>`__

IMO：SQLModel所感
======================================================================

* SQLModelでFastAPIアプリは ``async def`` で書けるが、まだまだ発展途上（0.0.22）
* **SQLAlchemyの経験** がある方にだけ、オススメします
* 経験ない我が身には、SQLModel + SQLAlchemyと *学びが2倍* だった🙌

IMO：SQLModelの現状🏃‍♂️
--------------------------------------------------

* チュートリアルはtoy exampleで実務レベルの例がない（プルリクチャンス！）
* `先の比較記事 <https://www.david-dahan.com/blog/comparing-fastapi-and-django>`__ より、シングルメンテナゆえに判断を誤ったのでは
* FastAPIユーザが **分断** されてしまっている（SQLModel採用のアプリケーション例が見つかりにくい）

.. 空振ってSQLAlchemyを調べる
.. order by

.. TODO マイグレーション sqldef
    https://x.com/ftnext/status/1839544709045453293
