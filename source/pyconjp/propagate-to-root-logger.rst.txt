.. _propagate: https://docs.python.org/ja/3/library/logging.html#logging.Logger.propagate

Chapter 3: ルートロガーでロギングしよう - propagate（伝播）
======================================================================

ロガーの親子関係で重要なものは、``NOTSET`` レベルの他にもう1つ

ロガーの `propagate`_ 属性
======================================================================

    この属性が真と評価された場合、このロガーに記録されたイベントは、このロガーに取り付けられた全てのハンドラに加え、上位 (祖先) ロガーのハンドラにも渡されます。

``getLogger`` すると ``propagate`` は ``True``
------------------------------------------------------------

.. code-block:: pycon

    >>> import logging
    >>> httpx_logger = logging.getLogger("httpx")
    >>> httpx_logger.propagate
    True

ロガーの親子関係（再び）
--------------------------------------------------

.. image:: ../_static/pyconjp/pyconjp-logger-ancestors-part.drawio.png
    :scale: 120%

propagate（伝播）
--------------------------------------------------

* ``httpx`` ロガーのロギングレベル以上のメソッドが呼ばれた
* そのログレコードは **親のルートロガーに伝播** し、親のハンドラにも渡る

propagateでログレコードは **親ロガーのハンドラへ**
------------------------------------------------------------

.. image:: ../_static/pyconjp/pyconjp-logger-propagate-handlers.drawio.png
    :scale: 120%

📌伝播では **親ロガーのレベルは見ない** [#reload1]_
----------------------------------------------------------------------

.. [#reload1] 読み込めてなさそうならリロードを。 `Logging Flow <https://docs.python.org/ja/3/howto/logging.html#logging-flow>`__  (Logger flow)の簡略版（なお省略しましたが、親ロガーのフィルタも見ません）

.. mermaid:: ../pyconshizu/logging-propagate-flow.mmd
    :zoom:
    :config: {"themeVariables": {"lineColor": "#fff"}}

右側のループで、親ロガーのレベルを見ていません

💡ルートロガーにハンドラをつければロギングできる！
======================================================================

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 13-21
    :emphasize-lines: 1,4,9
    :caption: `本トークで示すロギングの1つの型 <https://github.com/ftnext/2025-slides/blob/6f6b360b8b884f5dce9b62e2cd37055c0313db25/samplecode/python-logging/library_logger/root_logging_hard.py>`__

ハンドラにフォーマッタをとりつけ
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 13-21
    :emphasize-lines: 4-8

**全て** のロガーのログ出力 [#httpx-guide-logging]_
------------------------------------------------------------

.. literalinclude:: all-logger-log.txt
    :caption: ``httpx`` ロガーも ``httpcore`` ロガーも実効レベルが ``DEBUG``

.. [#httpx-guide-logging] https://www.python-httpx.org/logging/

.. _logging.basicConfig(): https://docs.python.org/ja/3/library/logging.html#logging.basicConfig

🍰 `logging.basicConfig()`_ でルートロガーを簡単に設定
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_easy.py
    :language: python
    :lines: 13-16

* ルートロガーにハンドラ設定（デフォルトで ``StreamHandler``）
* そのハンドラにフォーマッタも設定（``format`` 引数）

多い出力には、フィルタ
--------------------------------------------------

* （ルートロガーではなく） **ルートロガーのハンドラにフィルタ** を設定
* ``httpx`` ロガーによるログだけを出力

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 22

なぜハンドラにフィルタをつける？ [#reload2]_
--------------------------------------------------

.. mermaid:: ../pyconjp/logging-handler-flow.mmd
    :config: {"themeVariables": {"lineColor": "#fff"}}

**ハンドラのレベルとフィルタ** は確認される

.. [#reload2] 読み込めてなさそうならリロードを。 `Logging Flow <https://docs.python.org/ja/3/howto/logging.html#logging-flow>`__ (Handler flow)

伝播では親ロガーのレベル（とフィルタ）は見ない
--------------------------------------------------

.. mermaid:: ../pyconshizu/logging-propagate-flow.mmd
    :zoom:
    :config: {"themeVariables": {"lineColor": "#fff"}}

* ルートロガーのフィルタは見ない（再掲した図） [#reload1]_
* ルートロガーの **ハンドラのフィルタ** は見る（前頁）

まとめ🥟 ルートロガーでロギング
======================================================================

* ライブラリ（例：HTTPX）のロガーの実効レベルは、ルートロガーと同じ（``NOTSET``）
* ライブラリのロガーは ``propagate=True`` （ルートロガーに伝播）
* ルートロガーに **ハンドラ・フォーマッタ・フィルタを取り付け** てロギングできる！

ルートロガーでロギングの例 [#appendix-note]_
======================================================================

``NOTSET`` と ``propagate`` を使った **2例** 紹介

.. [#appendix-note] 本発表はルートロガーの設定で話しますが、ルートロガーの代わりに、特定モジュールのトップレベルのロガーに設定しても同じ議論と思います

例1️⃣ ルートロガーに **複数ハンドラ**
======================================================================

.. logging flow を通して、ハンドラのレベルは知った

例「``INFO`` 以上はファイルにロギング、``ERROR`` 以上はコンソールにも出力」

* ``ERROR`` レベルの ``StreamHandler``
* ``INFO`` レベルの ``FileHandler``

``DEBUG`` 以上をファイルに、``INFO`` 以上をコンソールに
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_multi_handlers.py
    :language: python
    :lines: 14-31
    :caption: `ルートロガーに複数ハンドラの例 <https://github.com/ftnext/2025-slides/blob/f3901a2f5d7fa3bdf3f11e0c83c515781d51c116/samplecode/python-logging/library_logger/root_logging_multi_handlers.py>`__

``DEBUG`` 以上をファイルに
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_multi_handlers.py
    :language: python
    :lines: 14-31
    :emphasize-lines: 9-13

``INFO`` 以上をコンソールに
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_multi_handlers.py
    :language: python
    :lines: 14-31
    :emphasize-lines: 5-7

例2️⃣ JSON形式でロギング [#json-format-blog]_
======================================================================

* ルートロガーのハンドラのフォーマッタを **JSON出力するものに差し替え** るだけ
* `python-json-logger <https://github.com/nhairs/python-json-logger>`__ の ``JsonFormatter``

.. [#json-format-blog] 拙ブログ `PythonでログをJSON形式で出力したいなら、python-json-logger があるじゃな〜い！と思い出して触ったメモ <https://nikkie-ftnext.hatenablog.com/entry/python-json-logger-formatter-for-json-logging-quickstart>`__

``JsonFormatter`` に差し替え
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_jsonformat.py
    :language: python
    :lines: 12,14-24
    :emphasize-lines: 7
    :caption: `JSONでロギングする例 <https://github.com/ftnext/2025-slides/blob/f3901a2f5d7fa3bdf3f11e0c83c515781d51c116/samplecode/python-logging/library_logger/root_logging_jsonformat.py>`__

.. code-block:: json

    {"asctime": "2025-09-25 00:27:41,332", "levelname": "INFO", "name": "httpx", "filename": "_client.py", "funcName": "_send_single_request", "lineno": 1025, "message": "HTTP Request: GET https://peps.python.org/api/peps.json \"HTTP/1.1 200 OK\""}

ルートロガーでロギング 2例
======================================================================

* レベルによる出力先 の振り分け ➡️ 複数ハンドラ
* JSON形式 ➡️ フォーマッタを差し替え
* IMO：レゴブロックの組合せ（型）から **特定のパーツだけいじっている** 感

logging の構成要素を押さえると美しい、のですが
--------------------------------------------------

* HTTPXのようなロギングは、 **現実世界ではまれ** 😢
* ルートロガーでロギングという紹介した型が簡単に適用できないライブラリは多い（経験談）。皆さんにも武器を配ります
