.. _propagate: https://docs.python.org/ja/3/library/logging.html#logging.Logger.propagate

ルートロガーでロギングしよう - propagate（伝播）
======================================================================

ロガーの親子関係で重要なものは、レベルの他にもう1つ

ロガーの `propagate`_ 属性
======================================================================

    この属性が真と評価された場合、このロガーに記録されたイベントは、このロガーに取り付けられた全てのハンドラに加え、上位 (祖先) ロガーのハンドラにも渡されます。

ロガーの親子関係（再び）
--------------------------------------------------

.. image:: ../_static/pyconjp/logger-ancestors-part.drawio.png
    :scale: 120%

propagate（伝播）
--------------------------------------------------

* ``httpx`` ロガーのロギングレベル以上のメソッドが呼ばれた
* そのログレコードは **親のルートロガーに伝播** し、親のハンドラにも渡る

.. ここでロギングフロー？

ルートロガーにハンドラをつければロギングできる
======================================================================

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 13-21
    :emphasize-lines: 1,4,9

ハンドラにフォーマッタをとりつけ
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 13-21
    :emphasize-lines: 4-8

.. TODO 出力例

多い出力には、フィルタ
--------------------------------------------------

* （ルートロガーではなく）ハンドラにフィルタを設定
* ``httpx`` ロガーによるログだけを出力

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 22

なぜハンドラにフィルタをつける？
--------------------------------------------------

.. TODO よりわかりやすくできそう

* ロギングフローより、子のロガーから親のルートロガーに伝播
* このとき、**ルートロガーのフィルタは確認されない**
* ルートロガーのハンドラのフィルタは確認される

ルートロガーでロギングの例
======================================================================

ルートロガーに複数ハンドラ
--------------------------------------------------

「INFO以上はファイルにロギング、ERROR以上はコンソールにもログ出力」

JSONフォーマッタ
--------------------------------------------------

全てアプリケーションコードの話
--------------------------------------------------

* ルートロガーを設定するのは、アプリケーションコード（＝ライブラリの利用者のコード）
* ライブラリの作者は、ロギングのフォーマットや出力先には関心がない（**ルートロガーは触りません！**）

.. ライブラリまで行かなくても、自分が書くコードでもこれが当てはまることを伝えたい（論文の公開コード）
