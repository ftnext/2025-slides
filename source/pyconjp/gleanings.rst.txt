Chapter 5: 落穂拾い
======================================================================

1. 最終手段ハンドラ
2. 設定方法の選択肢（ファイルでの設定含む）
3. 標準ライブラリ logging 以外の選択肢（loguruなど）

1️⃣ 最終手段ハンドラ
======================================================================

.. literalinclude:: ../../samplecode/python-logging/last_resort_example/mylib.py
    :language: python
    :lines: 1-6,8
    :caption: ライブラリでwarningのロギング

実は ``basicConfig()`` なしでロギングできます
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/last_resort_example/app.py
    :language: python
    :caption: ルートロガーを設定しないアプリケーションコード

.. code-block:: txt

    ちょっとヤバいよ

ロガーにハンドラを指定しないとき
--------------------------------------------------

    イベントは、 ``lastResort`` に格納された「最終手段ハンドラ」を使用して出力されます。

    ハンドラのレベルは ``WARNING`` にセットされ、(略)

`環境設定が与えられないとどうなるか <https://docs.python.org/ja/3/howto/logging.html#what-happens-if-no-configuration-is-provided>`__

.. 上記ドキュメントより「最終手段ハンドラはWARNINGレベル」なので、rootロガーのレベルをDEBUGに下げてもログ出力はない

最終手段ハンドラを使わないなら ``NullHandler``
--------------------------------------------------

    何らかの理由でロギング設定がなされていないときにメッセージを表示 *させたくない* のであれば、ライブラリのトップレベルのロガーに何もしないハンドラを取り付けられます。

`ライブラリのためのロギングの設定 <https://docs.python.org/ja/3/howto/logging.html#configuring-logging-for-a-library>`__

``NullHandler`` 以外を取り付けてはいけません🙅‍♂️
--------------------------------------------------

* ライブラリロガーのハンドラで出力
* 親のルートロガーに伝播（propagate）し、 ルートロガーのハンドラでも処理して **2重** 出力

2️⃣ 設定方法の選択肢
======================================================================

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_hard.py
    :language: python
    :lines: 13-22

.. _dictConfig: https://docs.python.org/ja/3/library/logging.config.html#logging.config.dictConfig

`dictConfig`_
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_dictconfig.py
    :language: python
    :lines: 8,13-39
    :caption: `ルートロガーでロギング dictConfig版 <https://github.com/ftnext/2025-slides/blob/6f6b360b8b884f5dce9b62e2cd37055c0313db25/samplecode/python-logging/library_logger/root_logging_dictconfig.py>`__

.. _fileConfig: https://docs.python.org/ja/3/library/logging.config.html#logging.config.fileConfig

コードの代わりに `fileConfig`_
--------------------------------------------------

* `configparser <https://docs.python.org/ja/3/library/configparser.html>`__ 形式ファイルで設定 [#configparser-file]_

    ファイルには、 [loggers], [handlers], [formatters] といったセクションが入っていなければならず、（`環境設定ファイルの書式 <https://docs.python.org/ja/3/library/logging.config.html#configuration-file-format>`__）

.. [#configparser-file] `ロギングの環境設定 <https://docs.python.org/ja/3/howto/logging.html#configuring-logging>`__ で見られます

💡YAMLファイル + ``dictConfig`` [#yaml-dictconfig-blog]_
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/library_logger/root_logging_yamlconfig.py
    :language: python
    :lines: 16-19
    :caption: `ルートロガーでロギング ファイルから辞書で読み込み版 <https://github.com/ftnext/2025-slides/blob/6f6b360b8b884f5dce9b62e2cd37055c0313db25/samplecode/python-logging/library_logger/root_logging_yamlconfig.py>`__

uvicornのロギングの実装で学びました

.. [#yaml-dictconfig-blog] 拙ブログ `Pythonのライブラリに用意されたロガーをlogging.configで設定する（httpxを例に、辞書やYAMLで設定） <https://nikkie-ftnext.hatenablog.com/entry/configure-python-librarys-logger-logging-config-dict-or-yaml>`__

3️⃣ 標準ライブラリ logging 以外の選択肢
======================================================================

`vinta/awesome-pythonのLogging <https://github.com/vinta/awesome-python?tab=readme-ov-file#logging>`__ にリスト

* loguru
* structlog

IMO：それぞれ我の強い世界観を持っている

.. _loguru: https://github.com/Delgan/loguru

`loguru`_
--------------------------------------------------

    Python logging made (stupidly) simple

* HTTPX の logging を使ったログを loguru で出力できます
* `Entirely compatible with standard logging <https://github.com/Delgan/loguru/tree/0.7.3?tab=readme-ov-file#entirely-compatible-with-standard-logging>`__ より、*InterceptHandler* を実装して、ルートロガーのハンドラに設定（次頁）

.. revealjs-break::
    :notitle:

.. literalinclude:: ../../samplecode/python-logging/library_logger/loguru_example.py
    :language: python
    :lines: 18-37
    :caption: `loguru でロギングする例 <https://github.com/ftnext/2025-slides/blob/f3901a2f5d7fa3bdf3f11e0c83c515781d51c116/samplecode/python-logging/library_logger/loguru_example.py>`__ [#loguru-with-logging-blog]_

.. [#loguru-with-logging-blog] 拙ブログ `HTTPX を例に、標準ライブラリ logging によるログを loguru で出力するには <https://nikkie-ftnext.hatenablog.com/entry/loguru-compatibility-with-stdlib-logging-example-httpx>`__

.. _structlog: https://github.com/hynek/structlog

`structlog`_
--------------------------------------------------

    Simple, powerful, and fast logging for Python.

* 標準ライブラリ logging から置き換えられるが、`互換でもある <https://www.structlog.org/en/stable/standard-library.html#suggested-configurations>`__ （*structlog.stdlib.ProcessorFormatter*）
* PyCon JP 2024「`実践structlog <https://2024.pycon.jp/en/talk/RRRAAT>`__」

.. revealjs-break::
    :notitle:

.. literalinclude:: ../../samplecode/python-logging/library_logger/structlog_example.py
    :language: python
    :lines: 23-39,49-55
    :caption: `structlog でロギングする例 <https://github.com/ftnext/2025-slides/blob/f3901a2f5d7fa3bdf3f11e0c83c515781d51c116/samplecode/python-logging/library_logger/structlog_example.py>`__ [#structlog-with-logging-blog]_

.. [#structlog-with-logging-blog] 拙ブログ `HTTPX を例に、標準ライブラリ logging によるログを structlog で出力するには <https://nikkie-ftnext.hatenablog.com/entry/structlog-integration-with-stdlib-logging-example-httpx>`__

One more thing
======================================================================

:command:`uvx --with happy-python-logging[flake8] flake8`
----------------------------------------------------------------------

* 自作 https://pypi.org/project/happy-python-logging/
* ``logging.basicConfig()`` の使用を **リンターで指摘** する案の実装に着手

.. code-block:: txt

    src/antipattern_logging/call_basic_config.py:3:1: HPL101 Don't configure the root logger in your library
