==========================================================================================
標準ライブラリのlogging、レゴブロックのように組合せてロギングできることを理解しよう！
==========================================================================================

標準ライブラリのlogging、レゴブロックのように組合せてロギングできることを理解しよう！
==========================================================================================

:Event: PyCon JP 2025（広島）
:Presented: 2025/09/27 nikkie

皆さん、自信を持って標準ライブラリのloggingを使えていますか？
----------------------------------------------------------------------

loggingモジュールを理解しましょう！（Takeaway）
--------------------------------------------------

* *ロガー*、*ハンドラ* といった構成要素を理解する
* 構成要素を **組合せ** てロギングできることを理解する

レゴブロックのように組合せて（IMO）
--------------------------------------------------

* 人類はえてして、easyなものをsimpleと言いがち
* **単純なもの（simple）を組合せて複雑なものを作る** ことができる（レゴブロックのように）
* Pythonに見るsimple：loggingモジュール、パッケージマネージャ

.. https://ftnext.github.io/2024-slides/ooc/software-lessons.html#/6

本トークの対象者
--------------------------------------------------

* 前提：**Pythonでロギングを実装した経験** あり
* loggingモジュールの使用経験は問いません
* 「loggingモジュールいまいちわからないんだよな...」、どんぴしゃターゲットです！

.. 使ったライブラリアンケート？

目次
--------------------------------------------------

1. 構成要素
2. ロガーのレベル
3. ルートロガーへの *伝播* （組合せたロギング）
4. 現実世界のライブラリのロギング実装への対処
5. 落穂拾い

.. include:: logging-components.rst.txt

.. include:: logger-level.rst.txt

.. include:: propagate-to-root-logger.rst.txt

.. include:: resistance-against-real-world-logging.rst.txt

.. include:: gleanings.rst.txt

最初の質問：自信を持って標準ライブラリのloggingを使えそうですか？
======================================================================

* ロガーの ``NOTSET`` レベル：**ルートロガーと同じレベル** で使える
* ルートロガーへの伝播（propagate）：**ルートロガーのハンドラで出力**

まとめ：標準ライブラリのlogging、レゴブロックのように組合せてロギングできることを理解しよう！
----------------------------------------------------------------------------------------------------

* ライブラリでは、イベントの記録（ロガーの呼び出し）のみ
* **ログの出力先、フォーマットはライブラリを使うコードで** 自由に設定できる余地を残す
* 「ライブラリでルートロガーを触ってはいけません」（プルリク送ってこ！）

ご清聴ありがとうございました！
--------------------------------------------------

Happy Python Logging♪
